{"ast":null,"code":"/**\n* @module gitty/parser\n*/\n'use strict';\n/**\n* @function\n* @param {string} output\n* @return {string}\n*/\n\nmodule.exports.log = function (output) {\n  var log = '[' + output.substring(0, output.length - 1) + ']'; // this function cleans the commit log from any double quotes breaking the\n  // JSON string\n\n  var jsonValueRegex = /\".*?\":\"(.*?)\"[,}]/g;\n  var h = log.match(jsonValueRegex);\n\n  if (h) {\n    for (var i = h.length - 1; i >= 0; i--) {\n      var hh = h[i].replace(jsonValueRegex, '$1');\n      var hhh = hh.replace(/\\\"/g, '\\\\\"').replace(/\\'/g, '');\n      log = log.replace(hh, hhh);\n    }\n  }\n\n  return JSON.parse(log);\n};\n/**\n* Output Handler for GIT status\n* @function\n* @param {string} gitstatus\n* @param {string} untracked\n* @return {string}\n*/\n\n\nmodule.exports.status = function (gitstatus, untracked) {\n  untracked = untracked.split('\\n');\n  var fileStatus = null;\n  var output = gitstatus.split('\\n');\n  var status = {\n    staged: [],\n    unstaged: [],\n    untracked: untracked.slice(0, untracked.length - 1),\n    ahead: 0,\n    behind: 0,\n    diverged: false\n  }; // iterate over lines\n\n  output.forEach(function (line) {\n    // switch to staged array\n    if (line.match(/changes to be committed/i)) {\n      fileStatus = 'staged';\n    } // or switch to not_staged array\n    else if (line.match(/changes not staged for commit/i)) {\n      fileStatus = 'unstaged';\n    } // or switch to untracked array\n    else if (line.match(/untracked files/i)) {\n      fileStatus = 'untracked';\n    }\n\n    var isAhead = line.match(/is ahead.+by (\\d+)/i);\n    var isBehind = line.match(/is behind.+by (\\d+)/i);\n    var haveDiverged = line.match(/and have (\\d+) and (\\d+) different/i);\n    var isModified = line.match(/modified/i);\n    var isNewFile = line.match(/new file/i);\n    var isDeleted = line.match(/deleted/i);\n\n    if (isBehind) {\n      status.behind = parseInt(isBehind[1]);\n    }\n\n    if (isAhead) {\n      status.ahead = parseInt(isAhead[1]);\n    }\n\n    if (haveDiverged) {\n      status.diverged = true;\n      status.ahead = parseInt(haveDiverged[1]);\n      status.behind = parseInt(haveDiverged[2]);\n    } // check if the line contains a keyword\n\n\n    if (isModified || isNewFile || isDeleted) {\n      // then remove # and all whitespace and split at the colon\n      var fileinfo = line.substr(1).trim().split(':'); // push a new object into the current array\n\n      status[fileStatus].push({\n        file: fileinfo[1].trim(),\n        status: fileinfo[0]\n      });\n    }\n  });\n  return status;\n};\n/**\n* Output handler for git commit\n* @function\n* @param {string} output\n* @return {string}\n*/\n\n\nmodule.exports.commit = function (output) {\n  var commitFailed = output.indexOf('nothing to commit') > -1 || output.indexOf('no changes added to commit') > -1; // if there is nothing to commit...\n\n  if (commitFailed) {\n    return {\n      error: function (output) {\n        var lines = output.split('\\n');\n\n        for (var ln = 0; ln < lines.length; ln++) {\n          if (lines[ln].indexOf('#') === -1) {\n            return lines[ln];\n          }\n        }\n      }(output)\n    };\n  }\n\n  var splitOutput = output.split('\\n');\n  var branchAndHash = splitOutput[0].match(/\\[([^\\]]+)]/g)[0];\n  var branch = branchAndHash.substring(1, branchAndHash.length - 1);\n  var hash = branchAndHash.substring(1, branchAndHash.length - 1);\n  var filesChanged = splitOutput[1].split(' ')[0];\n  var operations = splitOutput.splice(2);\n  return {\n    branch: branch.split(' ')[0],\n    commit: hash.split(' ')[1],\n    changed: filesChanged,\n    operations: operations\n  };\n};\n/**\n* Output handler for git branch command\n* @function\n* @param {string} output\n* @return {string}\n*/\n\n\nmodule.exports.branch = function (output) {\n  var tree = {\n    current: null,\n    others: []\n  };\n  var branches = output.split('\\n');\n  branches.forEach(function (val, key) {\n    if (val.indexOf('*') > -1) {\n      tree.current = val.replace('*', '').trim();\n    } else if (val) {\n      tree.others.push(val.trim());\n    }\n  });\n  return tree;\n};\n/**\n* Output handler for git tag command\n* @function\n* @param {string} output\n* @return {string}\n*/\n\n\nmodule.exports.tag = function (output) {\n  var tags = output.split(/\\r?\\n/);\n\n  for (var i = 0; i < tags.length; i++) {\n    if (!tags[i].length) {\n      tags.splice(i, 1);\n    }\n  }\n\n  return tags;\n};\n/**\n* Output handler for git remote -v command\n* @function\n* @param {string} output\n* @return {string}\n*/\n\n\nmodule.exports.remotes = function (output) {\n  var list = {};\n  var parseme = output.split('\\n');\n  parseme.forEach(function (val, key) {\n    if (val.split('\\t')[0]) {\n      list[val.split('\\t')[0]] = val.split('\\t')[1].split(' ')[0];\n    }\n  });\n  return list;\n};\n/**\n* Output handler for git errors from git push and pull commands\n* @function\n* @param {string} output\n* @return {string}\n*/\n\n\nmodule.exports.syncErr = function (output) {\n  var result = output.split('\\r\\n');\n\n  for (var i = 0; i < result.length; i++) {\n    if (!result[i].length) {\n      result.splice(i, 1);\n    }\n  }\n\n  return result;\n};\n/**\n* Output handler for git success messages from git push and pull commands\n* @function\n* @param {string} output\n* @return {string}\n*/\n\n\nmodule.exports.syncSuccess = function (output) {\n  return output;\n};","map":{"version":3,"names":["module","exports","log","output","substring","length","jsonValueRegex","h","match","i","hh","replace","hhh","JSON","parse","status","gitstatus","untracked","split","fileStatus","staged","unstaged","slice","ahead","behind","diverged","forEach","line","isAhead","isBehind","haveDiverged","isModified","isNewFile","isDeleted","parseInt","fileinfo","substr","trim","push","file","commit","commitFailed","indexOf","error","lines","ln","splitOutput","branchAndHash","branch","hash","filesChanged","operations","splice","changed","tree","current","others","branches","val","key","tag","tags","remotes","list","parseme","syncErr","result","syncSuccess"],"sources":["/Users/robinlaws/Documents/ASDTERM3/CP3540 Applied ASD Project /React-Movie-Reviews/movie-reviews/node_modules/gitty/lib/parser.js"],"sourcesContent":["/**\n* @module gitty/parser\n*/\n\n'use strict';\n\n/**\n* @function\n* @param {string} output\n* @return {string}\n*/\nmodule.exports.log = function(output) {\n  var log = '[' + output.substring(0, output.length - 1) + ']';\n\n  // this function cleans the commit log from any double quotes breaking the\n  // JSON string\n\n  var jsonValueRegex = /\".*?\":\"(.*?)\"[,}]/g;\n\n  var h = log.match(jsonValueRegex);\n\n  if (h) {\n    for (var i = h.length - 1; i >= 0; i--) {\n      var hh = h[i].replace(jsonValueRegex, '$1');\n      var hhh = hh.replace(/\\\"/g, '\\\\\"').replace(/\\'/g, '');\n\n      log = log.replace(hh, hhh);\n    }\n  }\n\n  return JSON.parse(log);\n};\n\n/**\n* Output Handler for GIT status\n* @function\n* @param {string} gitstatus\n* @param {string} untracked\n* @return {string}\n*/\nmodule.exports.status = function(gitstatus, untracked) {\n  untracked = untracked.split('\\n');\n\n  var fileStatus = null;\n  var output = gitstatus.split('\\n');\n\n  var status = {\n    staged: [],\n    unstaged: [],\n    untracked: untracked.slice(0, untracked.length - 1),\n    ahead: 0,\n    behind: 0,\n    diverged: false\n  };\n\n  // iterate over lines\n  output.forEach(function(line) {\n\n    // switch to staged array\n    if (line.match(/changes to be committed/i)) {\n      fileStatus = 'staged';\n    }\n    // or switch to not_staged array\n    else if (line.match(/changes not staged for commit/i)) {\n      fileStatus = 'unstaged';\n    }\n    // or switch to untracked array\n    else if (line.match(/untracked files/i)) {\n      fileStatus = 'untracked';\n    }\n    var isAhead = line.match(/is ahead.+by (\\d+)/i);\n    var isBehind = line.match(/is behind.+by (\\d+)/i);\n    var haveDiverged = line.match(/and have (\\d+) and (\\d+) different/i);\n    var isModified = line.match(/modified/i);\n    var isNewFile = line.match(/new file/i);\n    var isDeleted = line.match(/deleted/i);\n\n    if (isBehind) {\n      status.behind = parseInt(isBehind[1]);\n    }\n    if (isAhead) {\n      status.ahead = parseInt(isAhead[1]);\n    }\n\n    if (haveDiverged) {\n      status.diverged = true\n      status.ahead = parseInt(haveDiverged[1])\n      status.behind = parseInt(haveDiverged[2])\n    }\n    // check if the line contains a keyword\n    if (isModified || isNewFile || isDeleted) {\n      // then remove # and all whitespace and split at the colon\n      var fileinfo = line.substr(1).trim().split(':');\n      // push a new object into the current array\n      status[fileStatus].push({\n        file: fileinfo[1].trim(),\n        status: fileinfo[0]\n      });\n    }\n  });\n\n  return status;\n};\n\n/**\n* Output handler for git commit\n* @function\n* @param {string} output\n* @return {string}\n*/\nmodule.exports.commit = function(output) {\n  var commitFailed = (output.indexOf('nothing to commit') > -1 ||\n                      output.indexOf('no changes added to commit') > -1);\n\n  // if there is nothing to commit...\n  if (commitFailed) {\n    return {\n      error: (function(output) {\n        var lines = output.split('\\n');\n        for (var ln = 0; ln < lines.length; ln++) {\n          if (lines[ln].indexOf('#') === -1) {\n            return lines[ln];\n          }\n        }\n      })(output)\n    };\n  }\n\n  var splitOutput = output.split('\\n');\n  var branchAndHash = splitOutput[0].match(/\\[([^\\]]+)]/g)[0];\n  var branch = branchAndHash.substring(1, branchAndHash.length - 1);\n  var hash = branchAndHash.substring(1, branchAndHash.length - 1);\n  var filesChanged = splitOutput[1].split(' ')[0];\n  var operations = splitOutput.splice(2);\n\n  return {\n    branch: branch.split(' ')[0],\n    commit: hash.split(' ')[1],\n    changed: filesChanged,\n    operations: operations\n  };\n};\n\n/**\n* Output handler for git branch command\n* @function\n* @param {string} output\n* @return {string}\n*/\nmodule.exports.branch = function(output) {\n  var tree = { current: null, others: [] };\n  var branches = output.split('\\n');\n\n  branches.forEach(function(val, key) {\n    if (val.indexOf('*') > -1) {\n      tree.current = val.replace('*', '').trim();\n    }\n    else if (val) {\n      tree.others.push(val.trim());\n    }\n  });\n\n  return tree;\n};\n\n/**\n* Output handler for git tag command\n* @function\n* @param {string} output\n* @return {string}\n*/\nmodule.exports.tag = function(output) {\n  var tags = output.split(/\\r?\\n/);\n\n  for (var i = 0; i < tags.length; i++) {\n    if (!tags[i].length) {\n      tags.splice(i, 1);\n    }\n  }\n\n  return tags;\n};\n\n/**\n* Output handler for git remote -v command\n* @function\n* @param {string} output\n* @return {string}\n*/\nmodule.exports.remotes = function(output) {\n  var list = {};\n  var parseme = output.split('\\n');\n\n  parseme.forEach(function(val, key) {\n    if (val.split('\\t')[0]) {\n      list[val.split('\\t')[0]] = val.split('\\t')[1].split(' ')[0];\n    }\n  });\n\n  return list;\n};\n\n/**\n* Output handler for git errors from git push and pull commands\n* @function\n* @param {string} output\n* @return {string}\n*/\nmodule.exports.syncErr = function(output) {\n  var result = output.split('\\r\\n');\n\n  for (var i = 0; i < result.length; i++) {\n    if (!result[i].length) {\n      result.splice(i, 1);\n    }\n  }\n\n  return result;\n};\n\n/**\n* Output handler for git success messages from git push and pull commands\n* @function\n* @param {string} output\n* @return {string}\n*/\nmodule.exports.syncSuccess = function(output) {\n  return output;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}