{"ast":null,"code":"/*!\n * write <https://github.com/jonschlinkert/write>\n *\n * Copyright (c) 2014-2015, Jon Schlinkert.\n * Licensed under the MIT License.\n */\n'use strict';\n\nvar fs = require('fs');\n\nvar path = require('path');\n\nvar mkdir = require('mkdirp');\n/**\n * Asynchronously write a file to disk. Creates any intermediate\n * directories if they don't already exist.\n *\n * ```js\n * var writeFile = require('write');\n * writeFile('foo.txt', 'This is content to write.', function(err) {\n *   if (err) console.log(err);\n * });\n * ```\n *\n * @name  writeFile\n * @param  {String} `dest` Destination file path\n * @param  {String} `str` String to write to disk.\n * @param  {Function} `callback`\n * @api public\n */\n\n\nmodule.exports = function writeFile(dest, str, cb) {\n  var dir = path.dirname(dest);\n  fs.exists(dir, function (exists) {\n    if (exists) {\n      fs.writeFile(dest, str, cb);\n    } else {\n      mkdir(dir, function (err) {\n        if (err) {\n          return cb(err);\n        } else {\n          fs.writeFile(dest, str, cb);\n        }\n      });\n    }\n  });\n};\n/**\n * Synchronously write files to disk. Creates any intermediate\n * directories if they don't already exist.\n *\n * ```js\n * var writeFile = require('write');\n * writeFile.sync('foo.txt', 'This is content to write.');\n * ```\n *\n * @name  writeFile.sync\n * @param  {String} `dest` Destination file path\n * @param  {String} `str` String to write to disk.\n * @api public\n */\n\n\nmodule.exports.sync = function writeFileSync(dest, str) {\n  var dir = path.dirname(dest);\n\n  if (!fs.existsSync(dir)) {\n    mkdir.sync(dir);\n  }\n\n  fs.writeFileSync(dest, str);\n};\n/**\n * Uses `fs.createWriteStream`, but also creates any intermediate\n * directories if they don't already exist.\n *\n * ```js\n * var write = require('write');\n * write.stream('foo.txt');\n * ```\n *\n * @name  writeFile.stream\n * @param  {String} `dest` Destination file path\n * @return  {Stream} Returns a write stream.\n * @api public\n */\n\n\nmodule.exports.stream = function writeFileStream(dest) {\n  var dir = path.dirname(dest);\n\n  if (!fs.existsSync(dir)) {\n    mkdir.sync(dir);\n  }\n\n  return fs.createWriteStream(dest);\n};","map":{"version":3,"names":["fs","require","path","mkdir","module","exports","writeFile","dest","str","cb","dir","dirname","exists","err","sync","writeFileSync","existsSync","stream","writeFileStream","createWriteStream"],"sources":["/Users/robinlaws/Documents/ASDTERM3/CP3540 Applied ASD Project /React-Movie-Reviews/movie-reviews/node_modules/write/index.js"],"sourcesContent":["/*!\n * write <https://github.com/jonschlinkert/write>\n *\n * Copyright (c) 2014-2015, Jon Schlinkert.\n * Licensed under the MIT License.\n */\n\n'use strict';\n\nvar fs = require('fs');\nvar path = require('path');\nvar mkdir = require('mkdirp');\n\n/**\n * Asynchronously write a file to disk. Creates any intermediate\n * directories if they don't already exist.\n *\n * ```js\n * var writeFile = require('write');\n * writeFile('foo.txt', 'This is content to write.', function(err) {\n *   if (err) console.log(err);\n * });\n * ```\n *\n * @name  writeFile\n * @param  {String} `dest` Destination file path\n * @param  {String} `str` String to write to disk.\n * @param  {Function} `callback`\n * @api public\n */\n\nmodule.exports = function writeFile(dest, str, cb) {\n  var dir = path.dirname(dest);\n  fs.exists(dir, function (exists) {\n    if (exists) {\n      fs.writeFile(dest, str, cb);\n    } else {\n      mkdir(dir, function (err) {\n        if (err) {\n          return cb(err);\n        } else {\n          fs.writeFile(dest, str, cb);\n        }\n      });\n    }\n  });\n};\n\n/**\n * Synchronously write files to disk. Creates any intermediate\n * directories if they don't already exist.\n *\n * ```js\n * var writeFile = require('write');\n * writeFile.sync('foo.txt', 'This is content to write.');\n * ```\n *\n * @name  writeFile.sync\n * @param  {String} `dest` Destination file path\n * @param  {String} `str` String to write to disk.\n * @api public\n */\n\nmodule.exports.sync = function writeFileSync(dest, str) {\n  var dir = path.dirname(dest);\n  if (!fs.existsSync(dir)) {\n    mkdir.sync(dir);\n  }\n  fs.writeFileSync(dest, str);\n};\n\n/**\n * Uses `fs.createWriteStream`, but also creates any intermediate\n * directories if they don't already exist.\n *\n * ```js\n * var write = require('write');\n * write.stream('foo.txt');\n * ```\n *\n * @name  writeFile.stream\n * @param  {String} `dest` Destination file path\n * @return  {Stream} Returns a write stream.\n * @api public\n */\n\nmodule.exports.stream = function writeFileStream(dest) {\n  var dir = path.dirname(dest);\n  if (!fs.existsSync(dir)) {\n    mkdir.sync(dir);\n  }\n  return fs.createWriteStream(dest);\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,IAAIA,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAhB;;AACA,IAAIC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAAlB;;AACA,IAAIE,KAAK,GAAGF,OAAO,CAAC,QAAD,CAAnB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAG,MAAM,CAACC,OAAP,GAAiB,SAASC,SAAT,CAAmBC,IAAnB,EAAyBC,GAAzB,EAA8BC,EAA9B,EAAkC;EACjD,IAAIC,GAAG,GAAGR,IAAI,CAACS,OAAL,CAAaJ,IAAb,CAAV;EACAP,EAAE,CAACY,MAAH,CAAUF,GAAV,EAAe,UAAUE,MAAV,EAAkB;IAC/B,IAAIA,MAAJ,EAAY;MACVZ,EAAE,CAACM,SAAH,CAAaC,IAAb,EAAmBC,GAAnB,EAAwBC,EAAxB;IACD,CAFD,MAEO;MACLN,KAAK,CAACO,GAAD,EAAM,UAAUG,GAAV,EAAe;QACxB,IAAIA,GAAJ,EAAS;UACP,OAAOJ,EAAE,CAACI,GAAD,CAAT;QACD,CAFD,MAEO;UACLb,EAAE,CAACM,SAAH,CAAaC,IAAb,EAAmBC,GAAnB,EAAwBC,EAAxB;QACD;MACF,CANI,CAAL;IAOD;EACF,CAZD;AAaD,CAfD;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAL,MAAM,CAACC,OAAP,CAAeS,IAAf,GAAsB,SAASC,aAAT,CAAuBR,IAAvB,EAA6BC,GAA7B,EAAkC;EACtD,IAAIE,GAAG,GAAGR,IAAI,CAACS,OAAL,CAAaJ,IAAb,CAAV;;EACA,IAAI,CAACP,EAAE,CAACgB,UAAH,CAAcN,GAAd,CAAL,EAAyB;IACvBP,KAAK,CAACW,IAAN,CAAWJ,GAAX;EACD;;EACDV,EAAE,CAACe,aAAH,CAAiBR,IAAjB,EAAuBC,GAAvB;AACD,CAND;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAJ,MAAM,CAACC,OAAP,CAAeY,MAAf,GAAwB,SAASC,eAAT,CAAyBX,IAAzB,EAA+B;EACrD,IAAIG,GAAG,GAAGR,IAAI,CAACS,OAAL,CAAaJ,IAAb,CAAV;;EACA,IAAI,CAACP,EAAE,CAACgB,UAAH,CAAcN,GAAd,CAAL,EAAyB;IACvBP,KAAK,CAACW,IAAN,CAAWJ,GAAX;EACD;;EACD,OAAOV,EAAE,CAACmB,iBAAH,CAAqBZ,IAArB,CAAP;AACD,CAND"},"metadata":{},"sourceType":"script"}