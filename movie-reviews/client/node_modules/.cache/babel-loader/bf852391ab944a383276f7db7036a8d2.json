{"ast":null,"code":"'use strict';\n\nvar childproc = require('child_process');\n\nvar exec = childproc.exec;\nvar execSync = childproc.execSync;\n\nvar utils = require('./utils');\n/**\n* Setup function for running git commands on the command line\n* @constructor\n* @param {Repository|string} repo or a string identifying the repo\n* @param {string} operation\n* @param {array}  flags\n* @param {string} options\n*/\n\n\nvar Command = function (repo, operation, flags, options) {\n  flags = flags || [];\n  options = options || ''; // Some operations on very large repos or long-lived repos will\n  // require more stdout buffer. The default (200K) seems sufficient\n  // for most operations except for 'log'.\n\n  this.execBuffer = 1024 * 200;\n\n  if (utils.isObject(repo)) {\n    this.repo = repo;\n    var largeOperations = repo.largeOperations || ['log', 'ls-files'];\n\n    if (largeOperations.indexOf(operation) > -1) {\n      this.execBuffer = repo.largeOperationsMaxBuffer || 1024 * 5000;\n    }\n  } else if (utils.isString(repo)) {\n    this.repo = {\n      path: repo,\n      gitpath: ''\n    };\n  } else {\n    this.repo = {\n      path: '/',\n      gitpath: ''\n    };\n  }\n\n  this.command = (this.repo.gitpath ? this.repo.gitpath + ' ' : 'git ') + operation + ' ' + flags.join(' ') + ' ' + options;\n};\n/**\n* Executes the stored operation in the given path\n* @param {function} callback\n*/\n\n\nCommand.prototype.exec = function (callback) {\n  return exec(this.command, this._getExecOptions(), callback);\n};\n/**\n* Executes the stored operation in the given path syncronously\n*/\n\n\nCommand.prototype.execSync = function () {\n  return execSync(this.command, this._getExecOptions()).toString();\n};\n/**\n* Return options to be passed to exec/execSync\n* @private\n*/\n\n\nCommand.prototype._getExecOptions = function () {\n  return {\n    cwd: this.repo.path,\n    maxBuffer: this.execBuffer\n  };\n};\n\nmodule.exports = Command;","map":{"version":3,"names":["childproc","require","exec","execSync","utils","Command","repo","operation","flags","options","execBuffer","isObject","largeOperations","indexOf","largeOperationsMaxBuffer","isString","path","gitpath","command","join","prototype","callback","_getExecOptions","toString","cwd","maxBuffer","module","exports"],"sources":["/Users/robinlaws/Documents/ASDTERM3/CP3540 Applied ASD Project /React-Movie-Reviews/movie-reviews/node_modules/gitty/lib/command.js"],"sourcesContent":["'use strict';\n\nvar childproc = require('child_process');\nvar exec = childproc.exec;\nvar execSync = childproc.execSync;\nvar utils = require('./utils');\n\n/**\n* Setup function for running git commands on the command line\n* @constructor\n* @param {Repository|string} repo or a string identifying the repo\n* @param {string} operation\n* @param {array}  flags\n* @param {string} options\n*/\nvar Command = function(repo, operation, flags, options) {\n  flags = flags || [];\n  options = options || '';\n\n  // Some operations on very large repos or long-lived repos will\n  // require more stdout buffer. The default (200K) seems sufficient\n  // for most operations except for 'log'.\n  this.execBuffer = 1024 * 200;\n\n  if (utils.isObject(repo)) {\n    this.repo = repo;\n    var largeOperations = repo.largeOperations || ['log', 'ls-files'];\n    if (largeOperations.indexOf(operation) > -1) {\n      this.execBuffer = repo.largeOperationsMaxBuffer || 1024 * 5000;\n    }\n  } else if (utils.isString(repo)) {\n    this.repo = { path: repo, gitpath: '' };\n  } else {\n    this.repo = { path: '/', gitpath: '' };\n  }\n  this.command = (this.repo.gitpath ? this.repo.gitpath + ' ' : 'git ') +\n    operation + ' ' + flags.join(' ') + ' ' + options;\n};\n\n/**\n* Executes the stored operation in the given path\n* @param {function} callback\n*/\nCommand.prototype.exec = function(callback) {\n  return exec(this.command, this._getExecOptions(), callback);\n};\n\n/**\n* Executes the stored operation in the given path syncronously\n*/\nCommand.prototype.execSync = function() {\n  return execSync(this.command, this._getExecOptions()).toString();\n};\n\n/**\n* Return options to be passed to exec/execSync\n* @private\n*/\nCommand.prototype._getExecOptions = function() {\n  return {\n    cwd: this.repo.path,\n    maxBuffer: this.execBuffer\n  };\n};\n\nmodule.exports = Command;\n"],"mappings":"AAAA;;AAEA,IAAIA,SAAS,GAAGC,OAAO,CAAC,eAAD,CAAvB;;AACA,IAAIC,IAAI,GAAGF,SAAS,CAACE,IAArB;AACA,IAAIC,QAAQ,GAAGH,SAAS,CAACG,QAAzB;;AACA,IAAIC,KAAK,GAAGH,OAAO,CAAC,SAAD,CAAnB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAII,OAAO,GAAG,UAASC,IAAT,EAAeC,SAAf,EAA0BC,KAA1B,EAAiCC,OAAjC,EAA0C;EACtDD,KAAK,GAAGA,KAAK,IAAI,EAAjB;EACAC,OAAO,GAAGA,OAAO,IAAI,EAArB,CAFsD,CAItD;EACA;EACA;;EACA,KAAKC,UAAL,GAAkB,OAAO,GAAzB;;EAEA,IAAIN,KAAK,CAACO,QAAN,CAAeL,IAAf,CAAJ,EAA0B;IACxB,KAAKA,IAAL,GAAYA,IAAZ;IACA,IAAIM,eAAe,GAAGN,IAAI,CAACM,eAAL,IAAwB,CAAC,KAAD,EAAQ,UAAR,CAA9C;;IACA,IAAIA,eAAe,CAACC,OAAhB,CAAwBN,SAAxB,IAAqC,CAAC,CAA1C,EAA6C;MAC3C,KAAKG,UAAL,GAAkBJ,IAAI,CAACQ,wBAAL,IAAiC,OAAO,IAA1D;IACD;EACF,CAND,MAMO,IAAIV,KAAK,CAACW,QAAN,CAAeT,IAAf,CAAJ,EAA0B;IAC/B,KAAKA,IAAL,GAAY;MAAEU,IAAI,EAAEV,IAAR;MAAcW,OAAO,EAAE;IAAvB,CAAZ;EACD,CAFM,MAEA;IACL,KAAKX,IAAL,GAAY;MAAEU,IAAI,EAAE,GAAR;MAAaC,OAAO,EAAE;IAAtB,CAAZ;EACD;;EACD,KAAKC,OAAL,GAAe,CAAC,KAAKZ,IAAL,CAAUW,OAAV,GAAoB,KAAKX,IAAL,CAAUW,OAAV,GAAoB,GAAxC,GAA8C,MAA/C,IACbV,SADa,GACD,GADC,GACKC,KAAK,CAACW,IAAN,CAAW,GAAX,CADL,GACuB,GADvB,GAC6BV,OAD5C;AAED,CAtBD;AAwBA;AACA;AACA;AACA;;;AACAJ,OAAO,CAACe,SAAR,CAAkBlB,IAAlB,GAAyB,UAASmB,QAAT,EAAmB;EAC1C,OAAOnB,IAAI,CAAC,KAAKgB,OAAN,EAAe,KAAKI,eAAL,EAAf,EAAuCD,QAAvC,CAAX;AACD,CAFD;AAIA;AACA;AACA;;;AACAhB,OAAO,CAACe,SAAR,CAAkBjB,QAAlB,GAA6B,YAAW;EACtC,OAAOA,QAAQ,CAAC,KAAKe,OAAN,EAAe,KAAKI,eAAL,EAAf,CAAR,CAA+CC,QAA/C,EAAP;AACD,CAFD;AAIA;AACA;AACA;AACA;;;AACAlB,OAAO,CAACe,SAAR,CAAkBE,eAAlB,GAAoC,YAAW;EAC7C,OAAO;IACLE,GAAG,EAAE,KAAKlB,IAAL,CAAUU,IADV;IAELS,SAAS,EAAE,KAAKf;EAFX,CAAP;AAID,CALD;;AAOAgB,MAAM,CAACC,OAAP,GAAiBtB,OAAjB"},"metadata":{},"sourceType":"script"}